name: Create Release

on:
  workflow_call:
    inputs:
      tag:
        required: true
        type: string
        
jobs: 
  create_release:
    runs-on: [self-hosted, windows, x64, testing]
    steps:

    - name: Create GitHub Release
      id: create_release
      shell: pwsh
      run: |
        Set-PSRepository -Name 'PSGallery' -InstallationPolicy Trusted
        Install-Module PSGitHub -Scope CurrentUser -Force

        $secureToken = ConvertTo-SecureString ${{ secrets.GITHUB_TOKEN }} -AsPlainText
        $tagName = "${{ inputs.tag }}"

        $preRelease = $false
        if ($tagName.Contains('-')) {
            $preRelease = $true
        }

        $release = New-GitHubRelease -RepositoryName ${{ github.event.repository.name }} -Owner ${{ github.event.repository.owner.login }} -TagName $tagName -Token $secureToken -PreRelease:$preRelease
        Write-Output "releaseId=$($release.id)" >> $Env:GITHUB_OUTPUT
    
    - name: Upload artifacts as assets
      uses: actions/github-script@v7
      with:
        script: |
          let allArtifacts = await github.rest.actions.listWorkflowRunArtifacts({
             owner: context.repo.owner,
             repo: context.repo.repo,
             run_id: context.runId,
          });

          for (const artifact of allArtifacts.data.artifacts)
          {
            let download = await github.rest.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: artifact.id,
               archive_format: 'zip',
            });
            
            github.rest.repos.uploadReleaseAsset({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ steps.create_release.outputs.releaseId }},
              name: artifact.name + '.zip',
              data: download.data,
            });
            
            let fs = require('fs');
            fs.writeFileSync(`${process.env.GITHUB_WORKSPACE}/${artifact.name}.zip`, Buffer.from(download.data));
          }
